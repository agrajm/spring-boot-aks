# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

variables:
- group: terraformVariableGroup  # non-secret values
- group: secretVariableGroup

pool:
  vmImage: ubuntu-latest

stages:
- stage: build
  displayName: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'Replace tokens by secrets'
      inputs:
        targetFiles: |
          **/application.properties
        actionOnMissing: 'log warning'
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        verbosity: 'detailed'

    - task: Maven@3
      displayName: 'Build & Run Test Cases'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    - task: AzureCLI@2
      displayName: "Docker Build & Push"
      inputs:
        azureSubscription: azureServiceConnection
        scriptType: bash
        scriptLocation: inlineScript
        failOnStandardError: true
        inlineScript: |
          az acr login -n $(ACR_NAME)
          docker build -t $(ACR_LOGIN_SERVER)/$(ACR_REPO_NAME):$(Build.BuildNumber) .
          docker push $(ACR_LOGIN_SERVER)/$(ACR_REPO_NAME):$(Build.BuildNumber)

- stage: deploy
  displayName: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployApp
    displayName: Deploy to Dev
    pool:
      vmImage: ubuntu-latest
    environment: 'dev-k8s'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: qetza.replacetokens.replacetokens-task.replacetokens@3
              displayName: 'Replace tokens by secrets'
              inputs:
                targetFiles: |
                  **/*deployment.yaml
                actionOnMissing: 'log warning'
                tokenPrefix: '$('
                tokenSuffix: ')'
                verbosity: 'detailed'
            - task: AzureCLI@2
              displayName: "Update the Deployment with Latest Image & deploy to AKS"
              inputs:
                azureSubscription: azureServiceConnection
                scriptType: bash
                scriptLocation: inlineScript
                failOnStandardError: true
                inlineScript: |
                  echo "the build number in deploy is $(Build.BuildNumber)"
                  az aks show --name $(AKS_CLUSTER_NAME) --resource-group $(AKS_RESOURCE_GROUP)
                  echo "kube config is $KUBECONFIG"
                  export KUBECONFIG=$(pwd)/.kubeconfig-$(AKS_CLUSTER_NAME)
                  wget https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
                  unzip kubelogin-linux-amd64.zip
                  sudo mv bin/linux_amd64/kubelogin /usr/local/bin
                  kubelogin --help
                  kubelogin convert-kubeconfig -l azurecli
                  kubectl get nodes

