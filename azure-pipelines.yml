trigger:
- master

variables:
- group: terraformVariableGroup  # non-secret values
- group: secretVariableGroup

pool:
  vmImage: ubuntu-latest

stages:
- stage: build
  displayName: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'Replace tokens by secrets'
      inputs:
        targetFiles: |
          **/application.properties
        actionOnMissing: 'log warning'
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        verbosity: 'detailed'

    - task: Maven@3
      displayName: 'Build & Run Test Cases'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    - task: AzureCLI@2
      displayName: "Docker Build & Push"
      inputs:
        azureSubscription: azureServiceConnection
        scriptType: bash
        scriptLocation: inlineScript
        failOnStandardError: true
        inlineScript: |
          az acr login -n $(ACR_NAME)
          docker build -t $(ACR_LOGIN_SERVER)/$(ACR_REPO_NAME):$(Build.BuildNumber) .
          docker push $(ACR_LOGIN_SERVER)/$(ACR_REPO_NAME):$(Build.BuildNumber)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)/deploy'
        artifactName: manifests

- stage: deploy
  displayName: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployApp
    displayName: Deploy to Dev
    pool:
      vmImage: ubuntu-latest
    environment: 'dev-k8s'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: Bash@3
            displayName: 'Install kubelogin'
            inputs:
              failOnStderr: false
              targetType: 'inline'
              script: |
                export KUBECONFIG=$(pwd)/.kubeconfig-$(AKS_CLUSTER_NAME)
                echo "kube config is $KUBECONFIG"
                kubelogin_latest_tag=$(curl -fsSL https://api.github.com/repos/Azure/kubelogin/releases/latest | jq -r '.tag_name')
                kubelogin_download_url="https://github.com/Azure/kubelogin/releases/download/${kubelogin_latest_tag}/kubelogin-linux-amd64.zip"
                curl -fsSLO "${kubelogin_download_url}"
                unzip kubelogin-linux-amd64.zip
                sudo mv ./bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
                sudo chmod +x /usr/local/bin/kubelogin

          - task: AzureCLI@2
            displayName: "Update the Deployment with Latest Image & deploy to AKS"
            inputs:
              azureSubscription: azureServiceConnection
              scriptType: bash
              scriptLocation: inlineScript
              failOnStandardError: true
              inlineScript: |
                export DEPLOYMENT_IMAGE_TAG="$(ACR_LOGIN_SERVER)/$(ACR_REPO_NAME):$(Build.BuildNumber)"
                ls -la
                sed -i -e 's/DEPLOYMENT_IMAGE/'$DEPLOYMENT_IMAGE_TAG'/g' $(Agent.BuildDirectory)/manifests/spring-boot-app-deployment.yaml
                cat $(Agent.BuildDirectory)/manifests/spring-boot-app-deployment.yaml
                export KUBECONFIG=$(pwd)/.kubeconfig-$(AKS_CLUSTER_NAME)
                az aks get-credentials --resource-group $(RESOURCE_GROUP_NAME) --name $(AKS_CLUSTER_NAME) --overwrite-existing --file $KUBECONFIG
                kubelogin convert-kubeconfig -l azurecli
                kubectl apply -f $(Agent.BuildDirectory)/manifests/*
